#!/usr/bin/env nix-shell
#!nix-shell -i bash -p bash getopt coreutils vagrant linuxPackages.virtualboxHeadless

set -eu
set -o pipefail

readonly SELF=$(basename "${BASH_SOURCE[0]}")
readonly SYSTEM_CONFIG=/etc/${SELF}rc
readonly USER_CONFIG=$HOME/.${SELF}rc
readonly BASE_DIR=$HOME/$SELF
readonly OS=$(uname)

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=
OPT_PROVIDER=VirtualBox

error () {
  if [[ "$OS" == "Darwin" ]]; then
      echo "error: $@" >&2
  else
    echo -e "\e[0;31m\e[1merror: \e[0;0m$@" >&2
  fi

  exit 1
}

warn () {
  if [[ "$OS" == "Darwin" ]]; then
      echo "warning: $@" >&2
  else
    echo -e "\e[0;33mwarning: \e[0;0m$@" >&2
  fi
}

warn_no_config () {
  warn "No config files were found. You may create a default one by running: '$SELF mc'"
}

debug () {
  if [[ -n "$OPT_DEBUG" ]]; then
      echo '**'
      echo \$@: $@
      echo \$OPT_HELP: "$OPT_HELP"
      echo \$OPT_DEBUG: "$OPT_DEBUG"
      echo \$OPT_VERBOSE: "$OPT_VERBOSE"
      echo \$OPT_PROVIDER: "$OPT_PROVIDER"
  fi
}

check_config () {
  debug check_config "$@"

  if [[ ! -e $SYSTEM_CONFIG && ! -e $USER_CONFIG ]]; then
      echo ""
      warn_no_config
  fi
}

read_config () {
  debug read_config "$@"

  if [[ -e $SYSTEM_CONFIG ]]; then
      source $SYSTEM_CONFIG
  elif [[ -e $USER_CONFIG ]]; then
      source $USER_CONFIG
  else
    warn_no_config
  fi
}

parse_arguments () {
  debug parse_arguments "$@"

  local opts=$(getopt -n "$SELF" --options hdvsp: --longoptions help,debug,verbose,provider: -- "$@")

  if [[ $? != 0 ]]; then error "failed to parsing arguments."; fi

  eval set -- "$opts"

  while true; do
    case "$1" in
      (-h|--help) OPT_HELP=true; shift ;;
      (-d|--debug) OPT_DEBUG=true; shift ;;
      (-v|--verbose) OPT_VERBOSE=true; shift ;;
      (-p|--provider) OPT_PROVIDER=$2; shift 2 ;;
      (--) shift; break ;;
      (*) break ;;
    esac
  done
}

process_arguments () {
  debug process_arguments "$@"

  if [[ -n "$OPT_HELP" || "$#" -lt 1 ]]; then
      display_usage
  else
    return 0
  fi
}

display_usage () {
  debug display_usage "$@"

  cat <<EOF
$SELF [Options] <Command> <Machine>

Options:
  -h,--help                  Show this help
  -p,--provider PROVIDER     Specify the provider

Commands:
  up,on
  down,off,halt
  destroy,delete
  status
  ssh
  purge
  machines,ls
  boxes,lb
  kill,kill-provider

Providers:
  virtualbox
  docker (WIP)

Commands other than the ones listed above are passed to Vagrant.
EOF

  #check_config
  exit 0
}

check_binaries () {
  debug check_binaries "$@"

  for i in vagrant VirtualBox pgrep; do
    if ! type -P $i > /dev/null; then
        error "The program \e[0;34m\e[1m${i}\e[0;0m is missing. Please install it, then re-run this program."
    fi
  done
}

check_vagrantfile () {
  debug check_vagrantfile "$@"

  if [[ -f "$PWD/Vagrantfile" ]]; then
      return 0
  else
    return 1
  fi
}

purge_machine () {
  debug purge_machine "$@"

  local machine=$1
  local input=""

  echo -n "Are you sure want to purge the machine $machine? "
  read -p "[y/N] " input

  if [[ "$input" == "y" || "$input" == "Y" ]]; then
      rm -rvf $BASE_DIR/$machine
  else
    return 1
  fi
}

purge_machines () {
  debug purge_machines "$@"

  local input="NO"

  echo -e "Are you sure want to purge all the following machines:\n"
  echo $(ls $BASE_DIR)
  echo -en "\nPlease type all uppercase YES to proceed: "
  read input

  if [[ "$input" == "YES" ]]; then
      find $BASE_DIR -maxdepth 1 -not -path $BASE_DIR -exec rm -rvf {} \;
  else
    return 1
  fi
}

purge_machine () {
  debug purge_machine "$@"

  if [[ "$#" == 0 ]]; then
      purge_machines
  else
    purge_machine $1
  fi
}

kill_provider () {
  debug kill_provider "$@"

  if [[ "$#" == 1 ]]; then
      pkill $1
  else
    pkill -9 $OPT_PROVIDER
  fi
}

list_machines () {
  debug list_machines "$@"

  [[ ! -d "$BASE_DIR" ]] && mkdir -p "$BASE_DIR"
  [[ -d "$BASE_DIR" ]] && ls -1 "$BASE_DIR"
}

list_boxes () {
  debug list_boxes "$@"

  for file in $SYSTEM_CONFIG $USER_CONFIG; do
    if [[ -f $file ]]; then
        cat $file | sed -e '/#/d' | awk -F = '{print $1}' | sort | sed 1d
    fi
  done
}

is_machine_installed () {
  debug is_machine_installed "$@"

  local machine=$1

  if [[ -d "$BASE_DIR/$machine" ]]; then
      return 0
  else
    return 1
  fi
}

is_machine_available () {
  debug is_machine_available "$@"

  local machine=$1

  if list_boxes | grep -q $machine; then
      return 0
  else
    return 1
  fi
}

box_name () {
  debug box_name "$@"

  local machine=$1

  read_config

  if is_machine_available $machine; then
      echo $(eval "echo \$$machine")
  elif is_machine_installed $machine; then
      echo "$machine"
  else
    echo ""
  fi
}

ensure_base_directory () {
  debug ensure_base_directory "$@"

  if [[ ! -d $BASE_DIR ]]; then
      mkdir -p $BASE_DIR
  fi
}

ensure_machine_directory () {
  debug ensure_machine_directory "$@"

  local machine=$1

  ensure_base_directory

  if [[ ! -d "$BASE_DIR/$machine" ]]; then
      mkdir -p "$BASE_DIR/$machine" > /dev/null 2>&1
  fi
}

initialize_box () {
  debug initialize_box "$@"

  local box=$1

  if ! check_vagrantfile; then
      vagrant init $box
  fi
}

make_config () {
  debug make_config "$@"

  if [[ -e "$USER_CONFIG" ]]; then
      error "An existing RC file is found. Skipping file creation."
  else
    cat > $USER_CONFIG <<EOF
ubuntu=ubuntu/trusty64
debian=debian/jessie64
nixos=pspringmeyer/nixos-16.03-x86_64
EOF

  fi
}

ensure_config () {
  if [[ ! -f "$SYSTEM_CONFIG" && ! -f "$USER_CONFIG" ]]; then
      make_config
  fi
}

internal_command () {
  debug internal_command "$@"

  local cmd=$1
  shift

  case $cmd in
    (purge)
      purge_machine $@
      ;;
    (kill|kill-provider)
      kill_provider $@
      ;;
    (list-machines|ls|machines)
      list_machines
      ;;
    (list-boxes|lb|boxes)
      list_boxes
      ;;
    (*) return 0 ;;
  esac

  exit 0
}

control_machine () {
  debug control_machine "$@"

  local op=$1
  shift

  case $op in
    up|on) vagrant up ;;
    down|off|halt) vagrant halt ;;
    destroy|delete) vagrant destroy ;;
    ssh) vagrant ssh -- "$@";;
    *) vagrant "$op" "$@" ;;
  esac
}

run_machine () {
  debug run_machine "$@"

  local opts=$(getopt -n "run_machine" --options i --longoptions initialize -- "$@")
  local opt_initialize=

  eval set -- "$opts"

  while true; do
    case "$1" in
      (-i|--initialize) opt_initialize=true; shift  ;;
      (--) shift; break ;;
      (*) break ;;
    esac
  done

  local box=$1

  [[ -n "$opt_initialize" ]] && initialize_box "$box"
  shift
  control_machine $@
}

load_machine () {
  debug load_machine "$@"

  [[ ! $# -ge 2 ]] && error "unsufficient number of arguments"

  local op=$1
  local machine=$2
  local box=$(box_name $machine)

  shift 2

  if [[ "$box" == "$machine" ]]; then
      cd "$BASE_DIR/$machine"
      #run_machine "${@:1:$(($#-1))}"
      run_machine $box $op $@
  elif [[ -z "$box" ]]; then
      error "The machine $machine is not defined. Please add a definition in your configuration."
  else
    ensure_machine_directory $machine
    cd "$BASE_DIR/$machine"
    #run_machine "$box" "${@:1:$(($#-1))}"
    run_machine --initialize $box $op $@
  fi
}

main () {
  debug main "$@"

  parse_arguments "$@"
  process_arguments "$@"
  check_binaries

  ensure_config
  
  internal_command "$@"
  load_machine "$@"
}

main "$@"
