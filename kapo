#!/usr/bin/env bash

set -eu
set -o pipefail

readonly SELF=$(basename "${BASH_SOURCE[0]}")
readonly SYSTEM_CONFIG=/etc/${SELF}rc
readonly USER_CONFIG=${HOME}/.${SELF}rc
readonly BASE_DIR=${HOME}/.${SELF}
readonly OS=$(uname)
readonly VERSION=1.0.0

OPT_HELP=
OPT_DEBUG=
OPT_VERBOSE=

OPT_PROVIDER=VirtualBox
OPT_MODE=vagrant

function error () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "error: ${@}" >&2
  else
    echo -e "\e[0;31m\e[1merror: \e[0;0m${@}" >&2
  fi

  exit 1
}

function warn () {
  if [[ "${OS}" == "Darwin" ]]; then
    echo "warning: ${@}" >&2
  else
    echo -e "\e[0;33mwarning: \e[0;0m${@}" >&2
  fi
}

function warn_no_config () {
  warn "No config files were found. You may create a default one by running: '${SELF} make-config'"
}

function debug () {
  if [[ -n "${OPT_DEBUG}" ]]; then
    echo '**'
    echo \${@}: ${@}
    echo \$OPT_HELP: "${OPT_HELP}"
    echo \$OPT_DEBUG: "${OPT_DEBUG}"
    echo \$OPT_VERBOSE: "${OPT_VERBOSE}"
    echo \$OPT_PROVIDER: "${OPT_PROVIDER}"
  fi
}

function check_config () {
  debug ${FUNCNAME[0]} "$@"

  if [[ ! -e "${SYSTEM_CONFIG}" && ! -e "${USER_CONFIG}" ]]; then
    echo ""
    warn_no_config
  fi
}

function read_config () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -e "${SYSTEM_CONFIG}" ]]; then
    source "${SYSTEM_CONFIG}"
  elif [[ -e "${USER_CONFIG}" ]]; then
    source "${USER_CONFIG}"
  else
    warn_no_config
  fi
}

function parse_arguments () {
  debug ${FUNCNAME[0]} "$@"

  local opts=$(getopt -n "${SELF}" --options hdvsp:m: --longoptions help,debug,verbose,provider:,mode: -- "$@")

  if [[ $? != 0 ]]; then error "failed to parsing arguments."; fi

  eval set -- "${opts}"

  while true; do
    case "$1" in
      -h|--help) OPT_HELP=true; shift ;;
      -d|--debug) OPT_DEBUG=true; shift ;;
      -v|--verbose) OPT_VERBOSE=true; shift ;;
      -p|--provider) OPT_PROVIDER=$2; shift 2 ;;
      -m|--mode) OPT_MODE=$2; shift 2 ;;
      --) shift; break ;;
      *) break ;;
    esac
  done
}

function process_arguments () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -n "${OPT_HELP}" || "${#}" -lt 1 ]]; then
    display_usage
  else
    return 0
  fi
}

function display_usage () {
  debug ${FUNCNAME[0]} "$@"

  cat << EOF
${SELF} [OPTIONS]... <COMMAND> <VM|SPEC> [COMMAND_OPTIONS]...

OPTIONS:
  -h, --help                  Show this help

COMMANDS:
  up <VM>                 Boot up a vm
  halt <VM>               Perform a graceful shutdown of a vm
  destroy <VM>            Stop a vm unconditionally
  status <VM>             Display status of a vm
  ssh <VM> [ARGS]         SSH to vm with optional ARGS
  purge <VM>              Delete vm at the filesystem level
  list-vms                List installed vms
  list-boxes              List available boxes
  add <SPEC>              Add a spec to the config file
  remove <SPEC>           Remove a spec from the config file
  link <DIRECTORY> <NAME> Create a box entry for <DIRECTORY> under name <NAME>
  edit <VM>               Edit the configuration file for <VM>
  <COMMAND> [ARGS]        Pass command and optional args to Vagrant
EOF
  exit 0
}

function check_binaries () {
  debug ${FUNCNAME[0]} "$@"

  for program in vagrant VirtualBox pgrep; do
    if ! type -P "${program}" > /dev/null; then
      error "The program \e[0;34m\e[1m${program}\e[0;0m is missing. Please install it, then re-run this program."
    fi
  done
}

function check_vagrantfile () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -f "${PWD}/Vagrantfile" ]]; then
    return 0
  else
    return 1
  fi
}

function purge_vm_single () {
  debug ${FUNCNAME[0]} "$@"

  local vm="$1"
  local input=""

  echo -n "Are you sure want to purge the vm ${vm}? "
  read -p "[y/N] " input

  if [[ "${input}" == "y" || "${input}" == "Y" ]]; then
    rm -rvf "${BASE_DIR}/${vm}"
  else
    return 1
  fi
}

function purge_vms () {
  debug ${FUNCNAME[0]} "$@"

  local input="NO"

  echo -e "Are you sure want to purge all the following vms:\n"
  echo $(ls "${BASE_DIR}")
  echo -en "\nPlease type all uppercase YES to proceed: "
  read input

  if [[ "${input}" == "YES" ]]; then
    find "${BASE_DIR}" -maxdepth 1 -not -path "${BASE_DIR}" -exec rm -rvf {} \;
  else
    return 1
  fi
}

function purge_vm () {
  debug ${FUNCNAME[0]} "$@"

  if [[ "${#}" == 0 ]]; then
    purge_vms
  else
    purge_vm_single $1
  fi
}

function kill_provider () {
  debug ${FUNCNAME[0]} "$@"

  if [[ "${#}" == 1 ]]; then
    pkill "$1"
  else
    pkill -9 "${OPT_PROVIDER}"
  fi
}

function list_vms () {
  debug ${FUNCNAME[0]} "$@"

  [[ ! -d "${BASE_DIR}" ]] && mkdir -p "${BASE_DIR}"
  [[ -d "${BASE_DIR}" ]] && ls -1 "${BASE_DIR}"
}

function list_boxes () {
  debug ${FUNCNAME[0]} "$@"

  for file in "${SYSTEM_CONFIG}" "${USER_CONFIG}"; do
    if [[ -f "${file}" ]]; then
      cat "${file}" | sed -e '/#/d' | sort | sed 1d
    fi
  done
}

function is_vm_installed () {
  debug ${FUNCNAME[0]} "$@"

  local vm="$1"

  if [[ -f "${BASE_DIR}/${vm}/Vagrantfile" ]]; then
    return 0
  else
    return 1
  fi
}

function is_box_available () {
  debug ${FUNCNAME[0]} "$@"

  local vm="$1"

  list_boxes | grep -q "${vm}"
}

function is_virtualbox_box_available () {
  debug ${FUNCNAME[0]} "$@"

  VBoxManage list vms | grep -q "^\"$1\"\ "
}


function box_name () {
  debug ${FUNCNAME[0]} "$@"

  local vm="$1"

  read_config

  if is_box_available "${vm}"; then
    echo $(eval "echo \$${vm}")
  elif is_vm_installed "${vm}"; then
    echo "${vm}"
  else
    echo ""
  fi
}

function spec_exists () {
  debug ${FUNCNAME[0]} "$@"

  local spec="$1"
  local file="$2"

  if [[ -f "${file}" ]]; then
    if grep -q "${spec}" "${file}"; then
      return 0
    else
      return 1
    fi
  fi
}

function add_vm () {
  debug ${FUNCNAME[0]} "$@"

  local spec="$1"
  local file="$2"

  if ! spec_exists "${spec}" "${file}"; then
    echo "${spec}" >> "${file}"
  else
    error "The spec ${spec} already exists. Skipping operation."
  fi
}

function remove_vm () {
  debug ${FUNCNAME[0]} "$@"

  local spec="$1"
  local file="$2"
  local temp=$(mktemp)

  if spec_exists "${spec}" "${file}"; then
    grep -v "${spec}" "${file}" > "${temp}" && mv "${temp}" "${file}"
  else
    error "The spec ${spec} doesnâ€™t exist. Skipping operation."
  fi
}

function ensure_base_directory () {
  debug ${FUNCNAME[0]} "$@"

  if [[ ! -d "${BASE_DIR}" ]]; then
    mkdir -p "${BASE_DIR}"
  fi
}

function ensure_vm_directory () {
  debug ${FUNCNAME[0]} "$@"

  local vm="$1"

  ensure_base_directory

  if [[ ! -d "${BASE_DIR}/${vm}" ]]; then
    mkdir -p "${BASE_DIR}/${vm}" > /dev/null 2>&1
  fi
}

function initialize_box () {
  debug ${FUNCNAME[0]} "$@"

  local box="$1"

  if ! check_vagrantfile; then
    vagrant init "${box}"
  fi
}

function make_config () {
  debug ${FUNCNAME[0]} "$@"

  if [[ -e "${USER_CONFIG}" ]]; then
    error "An existing RC file is found. Skipping file creation."
  else
    cat > "${USER_CONFIG}" << EOF
ubuntu=ubuntu/focal64
debian=debian/jessie64
fedora=fedora/32-cloud-base
EOF

  fi
}

function ensure_config () {
  if [[ ! -f "${SYSTEM_CONFIG}" && ! -f "${USER_CONFIG}" ]]; then
    make_config
  fi
}

function create_link () {
  debug ${FUNCNAME[0]} "$@"

  if [[ "${#}" -eq 2 ]]; then
    local source="$1"
    local name="$2"

    [[ -h "${BASE_DIR}/${name}" ]] && rm -f "${BASE_DIR}/${name}"

    if [[ -d "${BASE_DIR}/${name}" ]]; then
      error "Directory ${BASE_DIR}/${name} already exists; not symlinking."
    elif [[ -f "${BASE_DIR}/${name}" ]]; then
      error "File ${BASE_DIR}/${name} already exists; not symlinking."
    else
      ln -s "${source}" "${BASE_DIR}/${name}"
    fi
  else
    display_usage
  fi
}

function edit_config () {
  debug ${FUNCNAME[0]} "$@"

  local vm="$1"
  local config="${BASE_DIR}/${vm}/Vagrantfile"

  [[ -f "${config}" ]] && $EDITOR "${config}"
}

function internal_command () {
  debug ${FUNCNAME[0]} "$@"

  local op="$1"
  shift

  case "${op}" in
    add) add_vm "$1" "${USER_CONFIG}" ;;
    remove) remove_vm "$1" "${USER_CONFIG}" ;;
    purge) purge_vm "$@" ;;
    kill|kill-provider) kill_provider "$@" ;;
    list-vms|ls) list_vms ;;
    list-boxes|lsb) list_boxes ;;
    link) create_link "$@" ;;
    edit) edit_config "$@" ;;
    *) return 0 ;;
  esac

  exit $?
}

function control_vm () {
  debug ${FUNCNAME[0]} "$@"

  local op="$1"
  shift

  case "${op}" in
    ssh) vagrant ssh -- "$@";;
    *) vagrant "${op}" "$@" ;;
  esac
}

function load_vm () {
  debug ${FUNCNAME[0]} "$@"

  local opts=$(getopt -n "load_vm" --options i --longoptions initialize -- "$@")
  local opt_initialize=

  eval set -- "${opts}"

  while true; do
    case "$1" in
      -i|--initialize) opt_initialize=true; shift  ;;
      --) shift; break ;;
      *) break ;;
    esac
  done

  local box="$1"

  [[ -n "${opt_initialize}" ]] && initialize_box "${box}"
  shift
  control_vm "$@"
}

function vagrant_command () {
  debug ${FUNCNAME[0]} "$@"

  local op=
  local vm=
  local box=

  case "${OPT_MODE}" in
    vagrant)
      case "$1" in
        init|up|destroy|halt|reload|ssh|ssh-config|resume|share|status)
          op="$1"
          vm="$2"
          box=$(box_name $vm)
          shift 2

          if [[ "${box}" == "${vm}" ]]; then
            cd "${BASE_DIR}/${vm}"
            load_vm "${box}" "${op}" "$@"
            # elif is_virtualbox_box_available "$1"; then
            #   VBoxManage startvm --type headless "$1"
          elif [[ -z "${box}" ]]; then
            error "The vm ${vm} is not defined. Please add a definition in your configuration."
          else
            ensure_vm_directory "${vm}"
            cd "${BASE_DIR}/${vm}"
            load_vm --initialize -- "${box}" "${op}" "$@"
          fi
          ;;
        *) vagrant "$@" ;;
      esac
      ;;
    vboxmanage|vbm)
      echo $@
      ;;
    *)
      error error
      return 1
      ;;
  esac
}

function main () {
  debug ${FUNCNAME[0]} "$@"

  parse_arguments "$@"
  process_arguments "$@"
  check_binaries

  ensure_config

  internal_command "$@"
  vagrant_command "$@"
}

main "$@"
