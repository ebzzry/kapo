#!/usr/bin/env bash

set -eu
set -o pipefail

SCRIPT=$(basename "${BASH_SOURCE[0]}")
GLOBAL_SCRIPTRC=/etc/coparc
USER_SCRIPTRC=$HOME/.${SCRIPT}rc
BASE_DIR=$HOME/$SCRIPT

OPT_HELP=
OPT_FOO=
OPT_PROVIDER=VirtualBox

error () {
  echo -e "\e[0;31m\e[1merror: \e[0;0m$@" >&2
  exit 1
}

read_scriptrc () {
  [[ -e $GLOBAL_SCRIPTRC ]] && source $GLOBAL_SCRIPTRC   # base

  if [[ -e $USER_SCRIPTRC ]]; then
      source $USER_SCRIPTRC
  else
    error "No RC files exist. Please create one, then re-run this program."
  fi
}

ensure_directories () {
  if [[ ! -d $BASE_DIR ]]; then
      mkdir -p $BASE_DIR
  fi
}

display_usage () {
  cat <<EOF
$SCRIPT [OPTIONS] <VM> <OP>

OPTIONS:
-h                       Show this help
-p PROVIDER              Select provider

PROVIDERS: VirtualBox

VMS: nixos, ubuntu, freebsd

OPS: up, ssh, destroy, halt
EOF
  exit 0
}

check_options () {
  if [[ -n "$OPT_HELP" ]]; then
      display_usage
  fi
}

check_arguments () {
  if [[ "$#" -lt 1 ]]; then
      display_usage
  fi
}

check_binaries () {
  for i in vagrant VirtualBox pgrep; do
    if ! type -P $i > /dev/null; then
        error "The program \e[0;34m\e[1m${i}\e[0;0m is missing. Please install it, then re-run this program."
    fi
  done
}

check_vagrantfile () {
  if [[ -f "./Vagrantfile" ]]; then
      return 0
  else
    return 1
  fi
}

command_vm () {
  local op=$1

  # TODO: perform operations based on $op
  vagrant $op
}

load_provider () {
  case $OPT_PROVIDER in
    VirtualBox)
      if ! pgrep VirtualBox > /dev/null 2>&1; then
          VirtualBox &
      fi
      ;;
    *)
      error "Unable to handle provider \e[0;34m\e[1m${OPT_PROVIDER}\e[0;0m."
      ;;
  esac
}

purge_vm () {
  local vm=$1
  local input=""

  echo -n "Are you sure want to purge the VM $vm? "
  read -p "[y/N] " input

  if [[ "$input" == "y" ]]; then
      find $BASE_DIR -maxdepth 1 -type d -name $vm -exec rm -rvf {} \;
  else
    return 1
  fi
}

purge_vms () {
  local input="no"

  echo -e "Are you sure want to purge all the following VMs:\n"
  echo $(ls $BASE_DIR)
  echo -en "\nPlease type all uppercase YES to proceed: "
  read input

  if [[ "$input" == "YES" ]]; then
      find $BASE_DIR -maxdepth 1 -not -path $BASE_DIR -exec rm -rvf {} \;
  else
    return 1
  fi
}

kill_provider () {
  pkill -9 $OPT_PROVIDER
}

aux_command () {
  local cmd=$1
  shift

  case $cmd in
    purge)
      if [[ "$#" == 0 ]]; then
          purge_vms
      else
        purge_vm $1
      fi
      ;;
    kill)
      kill_provider
      ;;
    *)
      return 0
      ;;
  esac

  exit 0
}

init_vm () {
  local box=$1

  if ! check_vagrantfile; then
      vagrant init $box
  fi
}

run_vm () {
  local box=$1
  local op=$2

  init_vm $box
  command_vm $op
}

get_box () {
  local vm=$1
  read_scriptrc
  echo $(eval "echo \$$vm")
}

load_vm () {
  local vm=$1
  local op=$2
  local box=$(get_box $vm)

  if [[ -z "$box" ]]; then
      error "The VM $vm is not defined. Please add a definition in your .coparc."
  else
    load_provider
    cd $BASE_DIR
    [[ ! -d $vm ]] && mkdir $vm > /dev/null 2>&1
    cd $vm
    run_vm $box $op
  fi
}

main () {
  while getopts ":hf:p:" opt; do
    case $opt in
      h) OPT_HELP=true ;;
      f) OPT_FOO=${OPTARG} ;;
      p) OPT_PROVIDER=${OPTARG} ;;
      *) return 1 ;;
    esac
  done

  shift $((OPTIND-1))

  check_options
  check_arguments $@
  check_binaries
  ensure_directories

  aux_command $@

  load_vm $@
}

main "$@"
