#!/usr/bin/env bash

set -eu
set -o pipefail

readonly SELF=$(basename "${BASH_SOURCE[0]}")
readonly SYSTEM_COPARC=/etc/coparc
readonly USER_COPARC=$HOME/.${SELF}rc
readonly BASE_DIR=$HOME/$SELF
readonly OS=$(uname)

OPT_HELP=
OPT_SHOW_PROVIDER=
OPT_PROVIDER=vbox

error () {
  if [[ "$OS" == "Darwin" ]]; then
      echo "error: $@" >&2
  else
    echo -e "\e[0;31m\e[1merror: \e[0;0m$@" >&2
  fi

  exit 1
}

warning () {
  if [[ "$OS" == "Darwin" ]]; then
      echo "warning: $@" >&2
  else
    echo -e "\e[0;31mwarning: \e[0;0m$@" >&2
  fi
}

warning_no_rc () {
  warning "No RC files were found. You may create a default one by running: '$SELF mr'"
}

check_coparc () {
  if [[ ! -e $SYSTEM_COPARC && ! -e $USER_COPARC ]]; then
      echo ""
      warning_no_rc
  fi
}

read_coparc () {
  [[ -e $SYSTEM_COPARC ]] && source $SYSTEM_COPARC   # base

  if [[ -e $USER_COPARC ]]; then # overrides
      source $USER_COPARC
  else
    warning_no_rc
  fi
}

display_usage () {
  cat <<EOF
$SELF [OPTIONS] <VM|COMMAND> <OPERATION>

OPTIONS:
-h                       Show this help
-p PROVIDER              Specify provider
-s                       Show provider UI

PROVIDERS: virtualbox

VM: (please check your .coparc file)

COMMANDS: purge|rm, kill|kp, list-installed|li, list-available|la, make-rc|mr

OPERATIONS: up, ssh, down, rm, status
EOF

  check_coparc
  exit 0
}

check_options () {
  if [[ -n "$OPT_HELP" ]]; then
      display_usage
  fi
}

check_arguments () {
  if [[ "$#" -lt 1 ]]; then
      display_usage
  fi
}

check_binaries () {
  for i in vagrant VirtualBox pgrep; do
    if ! type -P $i > /dev/null; then
        error "The program \e[0;34m\e[1m${i}\e[0;0m is missing. Please install it, then re-run this program."
    fi
  done
}

check_vagrantfile () {
  if [[ -f "$PWD/Vagrantfile" ]]; then
      return 0
  else
    return 1
  fi
}

control_vm () {
  local op=$1
  shift

  case $op in
    on|up) vagrant up $@ ;;
    off|down) vagrant halt $@ ;;
    ssh)
      if [[ "$#" == 0 ]]; then
          vagrant ssh
      else
        vagrant ssh -c $@
      fi
      ;;
    rm|del)
      vagrant destroy
      ;;
    *)
      vagrant $op $@
      ;;
  esac
}

show_provider () {
  if [[ -n "$OPT_SHOW_PROVIDER" ]]; then
      case $OPT_PROVIDER in
        VirtualBox|virtualbox|vbox)
          if ! pgrep VirtualBox > /dev/null 2>&1; then
              VirtualBox > /dev/null 2>&1 &
          fi
          ;;
        *)
          error "Unable to handle provider \e[0;34m\e[1m${OPT_PROVIDER}\e[0;0m."
          ;;
      esac
  fi
}

purge_vm () {
  local vm=$1
  local input=""

  echo -n "Are you sure want to purge the VM $vm? "
  read -p "[y/N] " input

  if [[ "$input" == "y" ]]; then
      rm -rvf $BASE_DIR/$vm
  else
    return 1
  fi
}

purge_vms () {
  local input="no"

  echo -e "Are you sure want to purge all the following VMs:\n"
  echo $(ls $BASE_DIR)
  echo -en "\nPlease type all uppercase YES to proceed: "
  read input

  if [[ "$input" == "YES" ]]; then
      find $BASE_DIR -maxdepth 1 -not -path $BASE_DIR -exec rm -rvf {} \;
  else
    return 1
  fi
}

purge () {
  if [[ "$#" == 0 ]]; then
      purge_vms
  else
    purge_vm $1
  fi
}

kill_provider () {
  if [[ "$#" == 1 ]]; then
      pkill $1
  else
    pkill -9 $OPT_PROVIDER
  fi
}

list_installed_vms () {
  if [[ -d $BASE_DIR ]]; then
      ls -1 $BASE_DIR
  fi
}

list_available_vms () {
  for file in $SYSTEM_COPARC $USER_COPARC; do
    if [[ -f $file ]]; then
        cat $file | sed -e '/#/d' | awk -F = '{print $1}'
    fi
  done
}

make_rc () {
  if [[ -e $USER_COPARC ]]; then
      error "An existing RC file is found. Skipping file creation."
  else
    cat > $USER_COPARC <<EOF
nixos=zimbatm/nixos-15.09-x86_64
ubuntu=ubuntu/wily64
debian=debian/jessie64
EOF
  fi
}

aux_command () {
  local cmd=$1
  shift

  case $cmd in
    purge|rm)
      purge $@
      ;;
    kp|kill|kill-provider)
      kill_provider $@
      ;;
    li|list-installed)
      list_installed_vms
      ;;
    la|list-available)
      list_available_vms
      ;;
    mr|mkrc|make-rc)
      make_rc
      ;;
    *)
      return 0
      ;;
  esac

  exit 0
}

vm_available () {
  local vm=$1

  if list_available_vms | grep -q $vm; then
      return 0
  else
    return 1
  fi
}

get_box () {
  local vm=$1
  local box=

  read_coparc

  if vm_available $vm; then
      echo $(eval "echo \$$vm")
  else
    echo ""
  fi
}

ensure_base_directory () {
  if [[ ! -d $BASE_DIR ]]; then
      mkdir -p $BASE_DIR
  fi
}

ensure_vm_directory () {
  local vm=$1

  ensure_base_directory

  if [[ ! -d $BASE_DIR/$vm ]]; then
      mkdir -p $BASE_DIR/$vm > /dev/null 2>&1
  fi
}

init_vm () {
  local box=$1

  if ! check_vagrantfile; then
      vagrant init $box
  fi
}

run_vm () {
  local box=$1
  shift

  init_vm $box
  show_provider
  control_vm $@
}

load_vm () {
  local vm=$1
  local box=$(get_box $vm)
  shift

  if [[ -z "$box" ]]; then
      error "The VM $vm is not defined. Please add a definition in your .coparc."
  else
    ensure_vm_directory $vm
    cd $BASE_DIR/$vm
    run_vm $box $@
  fi
}

main () {
  while getopts ":hsp:" opt; do
    case $opt in
      h) OPT_HELP=true ;;
      s) OPT_SHOW_PROVIDER=true ;;
      p) OPT_PROVIDER=${OPTARG} ;;
      *) return 1 ;;
    esac
  done

  shift $((OPTIND-1))

  check_options
  check_arguments $@
  check_binaries

  aux_command $@

  load_vm $@
}

main "$@"
